#!/bin/bash
# Copyright (c) 2015, Stoney Jackson <dr.stoney@gmail.com>
# License: GPLv3


usage() {
    echo "usage:"
    echo "  $(basename "$0") init REPO [PATH]"
    echo "  $(basename "$0") update [PATH]"
}


init() {
    url="$1"
    if [ -z "$url" ] ; then
        usage
        exit 1
    fi
    path="${2%/}"
    if [ -z "$path" ] ; then
        path="$(pwd)/$(basename "$url" .git)"
    fi
    if [ -d "$path/.dip" ] ; then
        echo "Target is already a dip: $path"
        usage
        exit 1
    fi


    mkdir -p "$path/.dip/hooks/delete"
    cat > "$path/.dip/hooks/delete/4_main.bash" <<"EOF"
#!/bin/bash
branch="$1"
rm -r "$branch"
EOF
    chmod +x "$path/.dip/hooks/delete/4_main.bash"


    mkdir -p "$path/.dip/hooks/pull"
    cat > "$path/.dip/hooks/pull/4_main.bash" <<"EOF"
#!/bin/bash
branch="$1"
git --git-dir="$branch/.git" pull
EOF
    chmod +x "$path/.dip/hooks/pull/4_main.bash"


    mkdir -p "$path/.dip/hooks/clone"
    cat > "$path/.dip/hooks/clone/4_main.bash" <<"EOF"
#!/bin/bash
branch="$1"
git clone --branch "$branch" --single-branch ".dip/local.git" "$branch"
EOF
    chmod +x "$path/.dip/hooks/clone/4_main.bash"


    git clone --bare "$url" "$path/.dip/local.git" || rm -rf "$path/.dip"
}


update() {
    path="${1%/}"
    if [ -z "$path" ] ; then
        path="$(pwd)"
    fi
    path="$(cd "$path" && pwd)"
    if [ ! -d "$path/.dip" ] ; then
        echo "Not in a dip."
        usage
        exit 1
    fi
    git --git-dir="$path/.dip/local.git" fetch
    run-operations delete pull clone
}


run-operations() {
    for operation in "$@"; do
        for branch in $(branches_to_$operation); do
            run-hooks $operation "$branch"
        done
    done
}


run-hooks() {
    operation="$1"
    branch="$2"
    for hook in "$path/.dip/hooks/$1/"* ; do
        if [ -x "$hook" ] ; then
            (
                cd "$path"
                if [ -x "$hook" ] ; then
                    "$hook" "$branch" || return 1
                fi
            )
        fi
    done
}



branches_to_clone() {
    create_branch_files
    comm -2 -3 "$path/.dip/branches" "$path/.dip/branch_repos"
}


branches_to_delete() {
    create_branch_files
    comm -1 -3 "$path/.dip/branches" "$path/.dip/branch_repos"
}


branches_to_pull() {
    create_branch_files
    comm -1 -2 "$path/.dip/branches" "$path/.dip/branch_repos"
}


create_branch_files() {
    if [ -z "$BRANCH_FILES_CREATED" ] ; then
        BRANCH_FILES_CREATED="true"
        branches > "$path/.dip/branches"
        branch_repos > "$path/.dip/branch_repos"
    fi
}


branches() {
    git --git-dir="$path/.dip/local.git" branch | tr '*' ' ' | sed 's/ //g'
}


branch_repos() {
    for i in "$path"/* ; do
        if [ -d "$i" ] ; then
            echo "$i" | sed 's|.*/||'
        fi
    done
}


command_exists() {
    command -v "$1" >/dev/null 2>&1
}


cmd="$1"
shift
if command_exists "$cmd" ; then
    "$cmd" "$@"
else
    echo "Unknown command $cmd"
    usage
    exit 1
fi

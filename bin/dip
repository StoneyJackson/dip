#!/bin/bash
# Copyright (c) 2015, Stoney Jackson <dr.stoney@gmail.com>
# License: GPLv3
set -e


main() {
    set_environment
    parse_commandline "$@"
    run_subcommand "$@"
}


set_environment() {
    DIP_SCRIPT="$( get_script )"
    export DIP_HOME="$( dirname "$( dirname "$DIP_SCRIPT" )" )"
    source "$DIP_HOME/lib/util.bash"
}


get_script() {
    # Author: Dave Dopson
    # License: CC-BY-SA
    # http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
    local src="${BASH_SOURCE[0]}"
    local dir
    
    # resolve $SOURCE until the file is no longer a symlink
    while [ -h "$src" ]; do
        dir="$( cd -P "$( dirname "$src" )" && pwd )"
        src="$(readlink "$src")"
        
        # if $SOURCE was a relative symlink, we need to resolve it relative to
        # the path where the symlink file was located
        [[ $src != /* ]] && src="$dir/$src"
    done
    dir="$( cd -P "$( dirname "$src" )" && pwd )"
    echo "$dir/$( basename "$0" )"
}


parse_commandline() {
    DIP_OPTIONS=()
    while [ -n "$1" ] && ! is_subcommand "$1" ; do
        DIP_OPTIONS+=("$1")
        shift
    done
}


is_subcommand() {
    is_command "$( to_subcommand  "$1" )"
}


to_subcommand() {
    echo "$( basename "$DIP_SCRIPT" )-$1"
}


run_subcommand() {
    local cmd="$( to_subcommand "$1" )"
    shift
    "$cmd" "$@"
}


main "$@"
